Towards more simplicity:
-----------------------

Changes to elements in HTML5 go towards a greater simplicity. In this section, we will look at some examples highlighting these improvements, including:

- the new doctype definition;
- the fact that the "type" attribute of elements such as <link> or <script> are now  optional;
- the syntax constraints that have been relaxed;
- the new structural elements that have been added, etc.

A MINIMAL HTML5 DOCUMENT

<!DOCTYPE html>
<html lang="en">
<head>
   <meta charset="utf-8">
   <title>Page Title</title>
   <link rel="stylesheet" href="style.css">
   <script src="script.js"></script>
</head>
<body>
... <!-- The rest is content -->
</body>
</html>

Let's compare it to the HTML4 minimal document below (source: http://www.sitepoint.com/a-minimal-html-document/). Differences have been highlighted in red:

<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html lang="en">
 <head>
    <meta http-equiv="content-type" content="text/html" charset="utf-8">
    <title>title</title>
    <link rel="stylesheet" type="text/css" href="style.css">
    <script type="text/javascript" src="script.js"></script>
 </head>
<body>
...
</body>
</html>

SIMPLER CHARACTER SET DEFINITION

One word about the <meta charset="utf-8"> at line 4 in the HTML5 version: it is really a good practice to declare the character set of your document to protect against a serious security riski(https://code.google.com/p/doctype-mirror/wiki/ArticleUtf7). For more details, please refer to the "Why Internationalization is important" section in the Course Intro chapter.

NO MORE COMPLICATED DOCTYPE DEFINITIONS

The "Doctype", often called DTD (Document Type Declaration) is used by tools such as HTML validators (i.e.  the W3C validator), and specifies the rules used by  an HTML or an XHTML page. These rules are contained in special documents called "Document Type Definitions" (also abbreviated as DTD), written in a language that may seem a bit barbaric to humans (they are intended to be read by software), and hosted by W3C.

DTDs are not used by current Web browsers to  validate the structure of an HTML page, as  they "read" the code without using the DTD to decipher it, using only "rules" contained in their own "HTML engine", but it is still preferable to indicate the doctype as modern browsers have several rendering engines that are chosen depending on the doctype.

Old HTML1 Web pages will not be rendered the same way as new HTML5 pages, since in the 90's some of them were written by hand and may contain errors, embedded HTML elements, etc.

With HTML4, doctype definitions looked like this: <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">, and this was even more complicated as one had to choose between three different possibilities (doctypes could be transitional, strict, or frameset). Most of the time, the doctype definition was copied and pasted from one document to another and was nearly impossible to memorize.

With HTML5, there is only one way to indicate the doctype, and it's so simple there is no reason to forget it:

<!doctype html>


TTRIBUTE IS OPTIONAL

With a rel="stylesheet" attribute, it is no longer necessary to indicate type="text/css" (from the specification: "the default type for resources given by the  stylesheet  keyword is text/css.")

The "type" attribute is not needed in HTML5, and even old browsers will use text/css as the default type for stylesheets today. So, either way, you can omit the "type" attribute altogether and use:

<link href="file.css" rel="stylesheet"/>
instead of:

<link href="file.css" rel="stylesheet" type="text/css"/>
We will not go into detail about the <link> element, but the fact that the type attribute is becoming optional shows the current direction taken by HTML5: towards greater simplicity.

Please see how to include a JavaScript file in our page:

<script src="script.js"></script>
Here again, the type attribute has been omitted. Just as a reminder, the old way to do the same thing: 

<script type="text/javascript" src="script.js"></script>

MORE FLEXIBLE SYNTAX CONSTRAINTS

If you look at the "minimal document" example, or at other examples in this course, you won't find a lot of differences compared to the same code in XHTML: attribute values are surrounded by quotes, all elements are written in lower case, etc. This is because we are used to writing this way, but HTML5 supports also a simplified syntax:

Thanks to HTML5, you can omit quotes (not always, but most of the time) or use uppercase, lowercase or a mix of the two.
Lots of elements do not need a closing tag anymore: </li>, </dt>, </dd>, </tr>, </th>, </td>, </thead>, </tfoot>, </tbody>, </option>, </optgroup>, </p> (in most cases), </head>, </body> and </html>. Older browsers often add closing tags automatically at render time. We recommend however closing tags that would naturally be closed: the ones that delimit a particular zone in the document.
Attribute values only need to be quoted if they contain spaces or some non-alphanumeric characters, instead of writing <link rel="stylesheet" href="style.css">, we could have used <link rel=stylesheet href=style.css> instead. However, for compatibility with older browsers, it might be wiser to still use quotes...

What is the minimal code to define DOCTYPE in HTML5? <!DOCTYPE html>

New structural elements: See: pictureOfStructuringElements.jpg

HISTORY

As Web site layouts evolve, HTML5 structural elements like lists, paragraphs, tables, etc. show their limits. Today, many Web sites offer navigation menus, tabbed panels, headers, footers, and so on. The way these "parts"' are implemented relies heavily on <div> and <span> elements with different id and class attributes, lots of CSS and lots of JavaScript code to apply custom styles and behaviors.

However, with this approach, there are some issues:

id and class names differ from one developer to another, from one country to another, etc.
Even with the same ids and class names, the css rules may be different
JavaScript libraries became heavier and heavier over the years
Web pages became heavier and heavier over the years!
These elements could not be handled by the Web browser natively...
Even if there are differences between ids, classes and css/js implementations, there are also common behaviors, common layouts, common "way of doing things" that could be guessed at first glance by a human.

So different studies have been conducted in order to identify the most popular ids, class names, widgets, etc. used on the Web:

According to http://dev.opera.com/articles/view/new-structural-elements-in-html5/, "During the creation of HTML5, Ian Hickson used Google's tools to mine data from over a billion Web pages, surveying what ids and class names are most commonly used on the real world Web. You can see one of the surveys published at Google Code: Web Authoring Statistics: Classes. Opera did a similar study of 3.5 million URLs, calling it MAMA ("Metadata Analysis and Mining Application"). MAMA, as structural Web-paged search engine, had a smaller URL set, but looked at a larger and wider variety of Web page statistics. The articles published by Opera are no longer online but have been archived on github, and still can be accessed using web.archive.org, see MAMA common attributes, MAMA's id list, and MAMA's class list. For more options, go to the MAMA home page." - https://developers.google.com/webmasters/state-of-the-web/2005/classes?csw=1

NEW ELEMENTS ADDED TO THE HTML5 SET

The results of these surveys led to the addition of new structural elements in HTML5. For example, the very popular <div class="header"> led to the creation of a <header> element, <div class="aside"> to a <aside> element, etc.

Finally, the 20 most popular ids and class names found in Hickson's and Opera's surveys gave birth to these new elements (click on the element's name to go to the W3C specification about this element):

HTML5 structural elements with descriptions.
HTML5 element	Description
<header>	Introduction of "sectioning elements": an article, a section, the entire document (header page). Typically the header of a Web site that appears on top of each page, or a header of a long <article> or of a long <section>
<footer>	Contains the footer of a site, a long <article>, or a long <section>
<nav>	Section that contains the main navigation links (within the document or to other pages).
<article>	
Independent content, which can be individually extracted from the document and syndicated (RSS or equivalent) without penalizing its understanding. Typically a blog post.

<section>	
Generic section used to group different articles for different purposes or subjects, or to define the different sections of a single article. Generally used with a header.

<time>	Used for marking up times and dates.
<aside>	Section whose content is not necessarily directly related to the main content that surrounds it, but can provide additional information.
<figure> and <figcaption>	Used to encapsulate a figure as a single item, and contains a caption for the figure, respectively.
<main>	The main element represents the main content of the body of a document or application. The main content area consists of content that is directly related to or expands upon the central topic of a document or central functionality of an application. There can be only one <main> element in a document.And there is no <content> element even though the <div class="content"> was very popular. Instead, the HTML5 group decided that anything not embedded in one of the elements from the above table is "default content". If the content is of a type that corresponds to one of the elements from the table, i.e. if the content is an article, it should be embedded between <article> and </article>.

See: Mixing_all_new_elements_together.pdf


